// Code generated by mockery v2.14.1. DO NOT EDIT.

package aggressor

import (
	fs "io/fs"
	files "lester/files"

	mock "github.com/stretchr/testify/mock"

	tester "lester/tester"
)

// MockIComponent is an autogenerated mock type for the IComponent type
type MockIComponent struct {
	mock.Mock
}

// addMatchingTest provides a mock function with given fields: _a0
func (_m *MockIComponent) addMatchingTest(_a0 string) {
	_m.Called(_a0)
}

// generatePhpunitXmlFile provides a mock function with given fields: _a0
func (_m *MockIComponent) generatePhpunitXmlFile(_a0 []string) {
	_m.Called(_a0)
}

// getFs provides a mock function with given fields:
func (_m *MockIComponent) getFs() fs.FS {
	ret := _m.Called()

	var r0 fs.FS
	if rf, ok := ret.Get(0).(func() fs.FS); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FS)
		}
	}

	return r0
}

// getMatchingTests provides a mock function with given fields:
func (_m *MockIComponent) getMatchingTests() map[string]bool {
	ret := _m.Called()

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func() map[string]bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	return r0
}

// getRootPath provides a mock function with given fields:
func (_m *MockIComponent) getRootPath() files.IProjectPath {
	ret := _m.Called()

	var r0 files.IProjectPath
	if rf, ok := ret.Get(0).(func() files.IProjectPath); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.IProjectPath)
		}
	}

	return r0
}

// getTestRunner provides a mock function with given fields:
func (_m *MockIComponent) getTestRunner() tester.ITestRunner {
	ret := _m.Called()

	var r0 tester.ITestRunner
	if rf, ok := ret.Get(0).(func() tester.ITestRunner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tester.ITestRunner)
		}
	}

	return r0
}

// hasTestsToRun provides a mock function with given fields:
func (_m *MockIComponent) hasTestsToRun() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// runTests provides a mock function with given fields: _a0
func (_m *MockIComponent) runTests(_a0 []string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// setTestConfigArg provides a mock function with given fields: _a0
func (_m *MockIComponent) setTestConfigArg(_a0 []string) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewMockIComponent interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIComponent creates a new instance of MockIComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIComponent(t mockConstructorTestingTNewMockIComponent) *MockIComponent {
	mock := &MockIComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
